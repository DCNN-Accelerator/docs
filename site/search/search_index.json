{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Convolutional Neural Network Accelerator This document describes the architecture and implementation for an end-to-end 2D convolution acceleration system, targeting applications such as image filtering and deep convolutional neural networks. The goal is to make our work and design understandable for anyone. Project Overview Deep Convolutional Neural Networks (DCNNs) have made significant progress in approaching a wide range of problems in the general area of computer vision. However, they generally require enormous computational resources and are therefore difficult to deploy in real-time systems. To address this problem, we designed a system for accelerating the core operations required by DCNNs, by using a low-cost Field Programmable Gate Array (FPGA) platform. Our team designed an end-to-end accelerator platform, including a PC running Linux, an FPGA board and PC-to-FPGA communication via serial data (over USB). We designed a hardwired convolution processor using custom fixed-point multipliers, and a software handler for sending and reconstructing images. Using custom Verilog/VHDL RTL descriptions and C++ software, we aim to exploit the parallelism inherent to FPGAs for high-speed acceleration. Project Website Check out our website here for more information about our project.","title":"Home"},{"location":"#convolutional-neural-network-accelerator","text":"This document describes the architecture and implementation for an end-to-end 2D convolution acceleration system, targeting applications such as image filtering and deep convolutional neural networks. The goal is to make our work and design understandable for anyone.","title":"Convolutional Neural Network Accelerator"},{"location":"#project-overview","text":"Deep Convolutional Neural Networks (DCNNs) have made significant progress in approaching a wide range of problems in the general area of computer vision. However, they generally require enormous computational resources and are therefore difficult to deploy in real-time systems. To address this problem, we designed a system for accelerating the core operations required by DCNNs, by using a low-cost Field Programmable Gate Array (FPGA) platform. Our team designed an end-to-end accelerator platform, including a PC running Linux, an FPGA board and PC-to-FPGA communication via serial data (over USB). We designed a hardwired convolution processor using custom fixed-point multipliers, and a software handler for sending and reconstructing images. Using custom Verilog/VHDL RTL descriptions and C++ software, we aim to exploit the parallelism inherent to FPGAs for high-speed acceleration.","title":"Project Overview"},{"location":"#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"about/","text":"","title":"About"},{"location":"build_your_own/","text":"Build Your Own Deep Convolutional Neural Network Accelerator The following document describes how to get started and build your own DCNN. Step 1 Step 2 Project Website Check out our website here for more information about our project.","title":"Build Your Own"},{"location":"build_your_own/#build-your-own-deep-convolutional-neural-network-accelerator","text":"The following document describes how to get started and build your own DCNN.","title":"Build Your Own Deep Convolutional Neural Network Accelerator"},{"location":"build_your_own/#step-1","text":"","title":"Step 1"},{"location":"build_your_own/#step-2","text":"","title":"Step 2"},{"location":"build_your_own/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"hardware/","text":"Hardware Architecture Code can start below in this format: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Project Website Check out our website here for more information about our project.","title":"Hardware"},{"location":"hardware/#hardware-architecture","text":"","title":"Hardware Architecture"},{"location":"hardware/#code-can-start-below-in-this-format","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Code can start below in this format:"},{"location":"hardware/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"software/","text":"Software Architecture Code can start below in this format: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Project Website Check out our website here for more information about our project.","title":"Software"},{"location":"software/#software-architecture","text":"","title":"Software Architecture"},{"location":"software/#code-can-start-below-in-this-format","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Code can start below in this format:"},{"location":"software/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"}]}