{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Convolutional Neural Network Accelerator This document describes the architecture and implementation for an end-to-end 2D convolution acceleration system, targeting applications such as image filtering and deep convolutional neural networks. The goal is to make our work and design understandable for anyone. Project Overview Deep Convolutional Neural Networks (DCNNs) have made significant progress in approaching a wide range of problems in the general area of computer vision. However, they generally require enormous computational resources and are therefore difficult to deploy in real-time systems. To address this problem, we designed a system for accelerating the core operations required by DCNNs, by using a low-cost Field Programmable Gate Array (FPGA) platform. Our team designed an end-to-end accelerator platform, including a PC running Linux, an FPGA board and PC-to-FPGA communication via serial data (over USB). We designed a hardwired convolution processor using custom fixed-point multipliers, and a software handler for sending and reconstructing images. Using custom Verilog/VHDL RTL descriptions and C++ software, we aim to exploit the parallelism inherent to FPGAs for high-speed acceleration. Project Website Check out our website here for more information about our project.","title":"Home"},{"location":"#convolutional-neural-network-accelerator","text":"This document describes the architecture and implementation for an end-to-end 2D convolution acceleration system, targeting applications such as image filtering and deep convolutional neural networks. The goal is to make our work and design understandable for anyone.","title":"Convolutional Neural Network Accelerator"},{"location":"#project-overview","text":"Deep Convolutional Neural Networks (DCNNs) have made significant progress in approaching a wide range of problems in the general area of computer vision. However, they generally require enormous computational resources and are therefore difficult to deploy in real-time systems. To address this problem, we designed a system for accelerating the core operations required by DCNNs, by using a low-cost Field Programmable Gate Array (FPGA) platform. Our team designed an end-to-end accelerator platform, including a PC running Linux, an FPGA board and PC-to-FPGA communication via serial data (over USB). We designed a hardwired convolution processor using custom fixed-point multipliers, and a software handler for sending and reconstructing images. Using custom Verilog/VHDL RTL descriptions and C++ software, we aim to exploit the parallelism inherent to FPGAs for high-speed acceleration.","title":"Project Overview"},{"location":"#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"about/","text":"","title":"About"},{"location":"build_your_own/","text":"Build Your Own Deep Convolutional Neural Network Accelerator The following document describes how to get started and build your own DCNN. Step 1 Step 2 Project Website Check out our website here for more information about our project.","title":"Build Your Own"},{"location":"build_your_own/#build-your-own-deep-convolutional-neural-network-accelerator","text":"The following document describes how to get started and build your own DCNN.","title":"Build Your Own Deep Convolutional Neural Network Accelerator"},{"location":"build_your_own/#step-1","text":"","title":"Step 1"},{"location":"build_your_own/#step-2","text":"","title":"Step 2"},{"location":"build_your_own/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"hardware/","text":"Hardware Architecture The following outlines hardware specifications, block diagrams, pseudo code and important results and analysis for the project. Code can start below in this format: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Project Website Check out our website here for more information about our project.","title":"Hardware"},{"location":"hardware/#hardware-architecture","text":"The following outlines hardware specifications, block diagrams, pseudo code and important results and analysis for the project.","title":"Hardware Architecture"},{"location":"hardware/#code-can-start-below-in-this-format","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Code can start below in this format:"},{"location":"hardware/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"software/","text":"Software Architecture The following outlines software specifications, block diagrams, pseudo code and important results and analysis for the project. Code can start below in this format: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Project Website Check out our website here for more information about our project.","title":"Software"},{"location":"software/#software-architecture","text":"The following outlines software specifications, block diagrams, pseudo code and important results and analysis for the project.","title":"Software Architecture"},{"location":"software/#code-can-start-below-in-this-format","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Code can start below in this format:"},{"location":"software/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"},{"location":"verification/","text":"Verification The following outlines verification of the software-hardware emulation. Emulation Originally the emulation that was built had packaging issues, so a more efficient method was created in python. This design offers users a python interface; simply give the PC an image and kernel size, MATLAB is called. The output is acquired from MATLAB and the actual value can be calculated. mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Conv_tester Originally, this was written in MATLAB; however, it was rewritten in python. The code takes an image and kernel, preprocesses it to be compatible with MATLAB, with zero padding. The image can be whatever size and all of that in python, sends image and kernel to MATLAB. The python interface calls the fpga and removes zero padding. The system will check if it matches a true convolution; if it outputs valid the test passed, while invalid indicates that the test failed. Note that it failed at any of the images it would stop the whole loop. Project Website Check out our website here for more information about our project.","title":"Verification"},{"location":"verification/#verification","text":"The following outlines verification of the software-hardware emulation.","title":"Verification"},{"location":"verification/#emulation","text":"Originally the emulation that was built had packaging issues, so a more efficient method was created in python. This design offers users a python interface; simply give the PC an image and kernel size, MATLAB is called. The output is acquired from MATLAB and the actual value can be calculated. mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Emulation"},{"location":"verification/#conv_tester","text":"Originally, this was written in MATLAB; however, it was rewritten in python. The code takes an image and kernel, preprocesses it to be compatible with MATLAB, with zero padding. The image can be whatever size and all of that in python, sends image and kernel to MATLAB. The python interface calls the fpga and removes zero padding. The system will check if it matches a true convolution; if it outputs valid the test passed, while invalid indicates that the test failed. Note that it failed at any of the images it would stop the whole loop.","title":"Conv_tester"},{"location":"verification/#project-website","text":"Check out our website here for more information about our project.","title":"Project Website"}]}